name: Generate Sitemap

env:
  TZ: Asia/Tokyo

on:
  push:

jobs:
  get_articles:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      articles: ${{ steps.sorted_articles.outputs.articles }}
    steps:
      - uses: actions/github-scripts@v7
        id: sorted_articles
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
            const fetchUrl = "https://render-sample-1.onrender.com/articles";
            const exampleUrl = "https://example.com";
            const result = [];
            const perPage = 3;
            let page = 1;
            let maxPage = 1;
            for (let i = 0; i < maxPage; i += 1) {
              const res = await fetch(`${fetchUrl}?page=${page}&per_page=${perPage}`, {
                headers: {
                  "Content-Type": "application/json",
                  "x-api-key": "${{ secrets.X_API_KEY }}"
                }
              });
              if (!res.ok) {
                throw new Error(res.text)
              }
              const resJson = await res.json();
              const data = resJson.articles.map((article) => {
                return {
                  url: `${exampleUrl}/${article.route}/${article.slug}/`,
                  refreshed_at: article.refreshed_at
                }
              })
              result.push(...data)
              maxPage = (resJson.total + perPage - 1) / perPage;
            }
            result.sort((a, b) => {
              return new Date(b.refreshed_at) - new Date(a.refreshed_at);
            })
            return result;
      - name: get result
        run: echo "${{ steps.sorted_articles.outputs.result }}"
  