name: Generate Sitemap

env:
  TZ: Asia/Tokyo

on:
  push:

jobs:
  get_articles:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      articles: ${{ steps.sorted_articles.outputs.articles }}
    steps:
      - id: sorted_articles
        run: |
          set -e
          fetch_url=https://render-sample-1.onrender.com/articles
          example_url=https://example.com
          page=1
          per_page=3
          res=$(curl -fSsL -H "x-api-key: ${{ secrets.X_API_KEY }}" "${fetch_url}?page=${page}&per_page=${per_page}")
          articles=$(echo $res | jq --arg example_url "$example_url" -c '.articles[] | [{url:"\($example_url)/\(.route)/\(.slug)/", refreshed_at: .refreshed_at}]')
          total=$(echo $res | jq -r '.total')
          max_page=$((($total + $per_page - 1) / $per_page))
          for ((page=2; page<=max_page; page++)); do
            res=$(curl -fSsL -H "x-api-key: ${{ secrets.X_API_KEY }}" "${fetch_url}?page=${page}&per_page=${per_page}")
            tmp_artices=$(echo $res | jq --arg example_url "$example_url" -c '.articles[] | [{url:"\($example_url)/\(.route)/\(.slug)/", refreshed_at: .refreshed_at}]')
            articles=$(echo $articles $tmp_artices | jq -s -c add)
          done
          articles=$(echo $articles | jq -c 'sort_by(.refreshed_at) | reverse')
          echo "articles=${articles}" >> "$GITHUB_OUTPUT"
  get_users:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      users: ${{ steps.sorted_users.outputs.users }}
    steps:
      - id: sorted_users
        run: |
          set -e
          fetch_url=https://render-sample-1.onrender.com/users
          example_url=https://example.com
          page=1
          per_page=3
          res=$(curl -fSsL -H "x-api-key: ${{ secrets.X_API_KEY }}" "${fetch_url}?page=${page}&per_page=${per_page}")
          users=$(echo $res | jq '.users |= map(select(.articles | length > 0))' | jq --arg example_url "$example_url" -c '.users[] | [{url:"\($example_url)/users/\(.id)/", refreshed_at: .refreshed_at}]')
          total=$(echo $res | jq -r '.total')
          max_page=$((($total + $per_page - 1) / $per_page))
          for ((page=2; page<=max_page; page++)); do
            res=$(curl -fSsL -H "x-api-key: ${{ secrets.X_API_KEY }}" "${fetch_url}?page=${page}&per_page=${per_page}")
            tmp_users=$(echo $res | jq '.users |= map(select(.articles | length > 0))' | jq --arg example_url "$example_url" -c '.users[] | [{url:"\($example_url)/users/\(.id)/", refreshed_at: .refreshed_at}]')
            users=$(echo $users $tmp_users | jq -s -c add)
          done
          users=$(echo $users | jq -c 'sort_by(.refreshed_at) | reverse')
          echo "users=${users}" >> "$GITHUB_OUTPUT"
  generate_sitemap:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - get_articles
      - get_users
    permissions:
      contents: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_AND_WORKFLOW_PAT }}
      - name: Generate Branch Name
        id: generate_branch_name
        run: |
          branch_name=chore/sitemap_$(date +'%Y%m%d')
          echo "branch_name=${branch_name}" >> "$GITHUB_OUTPUT"
      - name: Create New Branch
        run: |
          git checkout -b ${{ steps.generate_branch_name.outputs.branch_name }}
          git push origin ${{ steps.generate_branch_name.outputs.branch_name }}
      - name: generate sitemap
        run: |
          article_urls=$(echo ${{ toJSON(needs.get_articles.outputs.articles) }} | jq -r '.[] | .url')
          users_urls=$(echo ${{ toJSON(needs.get_users.outputs.users) }} | jq -r '.[] | .url')
          other_urls=("https://ex.com/top/" "https://ex.com/" "https://ex.com/own/")
          sitemap="<?xml version="1.0" encoding="UTF-8"?>\n"
          sitemap+="<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n"
          for url in $article_urls; do
            sitemap+="\t<url>\n"
            sitemap+="\t\t<loc>${url}</loc>\n"
            sitemap+="\t</url>\n"
          done
          for url in $users_urls; do
            sitemap+="\t<url>\n"
            sitemap+="\t\t<loc>${url}</loc>\n"
            sitemap+="\t</url>\n"
          done
          for url in $other_urls; do
            sitemap+="\t<url>\n"
            sitemap+="\t\t<loc>${url}</loc>\n"
            sitemap+="\t</url>\n"
          done
          sitemap+="</urlset>"
          echo "$(pwd)/apps/web/public/sitemap.xml"
          echo "${sitemap}"
          echo -e $sitemap > ./apps/web/public/sitemap.xml
      - uses: stefanzweifel/git-auto-commit-action@v5
      # - name: Commit
      #   id: sitemap_commit
      #   run: |
      #     git config --global user.name "github-actions[bot]"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     cat ./apps/web/public/sitemap.xml
      #     git add .
      #     if ! git diff --quiet; then
      #       branch_name=chore/sitemap_$(date + '%Y%m%d')
      #       git checkout -b $branch_name
      #       git commit -m "chore: update sitemap"
      #       git push origin $branch_name
      #       echo "branch_name=${branch_name}" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "No change to commit"
      #       exit 1
      #     fi
      - name: Create PR
        run: |
          gh pr create --base main --head ${{ steps.generate_branch_name.outputs.branch_name }} --title "Update sitemap" --body "sitemap"
