name: Generate Sitemap

env:
  TZ: Asia/Tokyo

on:
  push:

jobs:
  get_articles:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      articles: ${{ steps.sorted_articles.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: sorted_articles
        with:
          result-encoding: json
          script: |
            const exampleUrl = "https://example.com";
            const perPage = 3;
            let maxPage = 1;
            let result = [];
            for (let page = 1; page <= maxPage; page += 1) {
              const res = await fetch(`https://render-sample-1.onrender.com/articles?page=${page}&per_page=${perPage}`, {
                headers: {
                  "Content-Type": "application/json",
                  "x-api-key": "${{ secrets.X_API_KEY }}"
                }
              });
              if (!res.ok) {
                throw new Error(res.text)
              }
              const resJson = await res.json();
              result = resJson.articles.reduce((acc, cur) => {
                return [
                  ...acc,
                  {
                    url: `${exampleUrl}/${cur.route}/${cur.slug}/`,
                    refreshed_at: cur.refreshed_at
                  }
                ]
              }, result);
              maxPage = (resJson.total + perPage - 1) / perPage;
            }
            result.sort((a, b) => {
              return new Date(b.refreshed_at) - new Date(a.refreshed_at);
            })
            return result;
  get_users:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      users: ${{ steps.sorted_users.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: sorted_users
        with:
          result-encoding: json
          script: |
            const exampleUrl = "https://example.com";
            const perPage = 3;
            let maxPage = 1;
            let result = [];
            for (let page = 1; page <= maxPage; page += 1) {
              const res = await fetch(`https://render-sample-1.onrender.com/users?page=${page}&per_page=${perPage}`, {
                headers: {
                  "Content-Type": "application/json",
                  "x-api-key": "${{ secrets.X_API_KEY }}"
                }
              });
              if (!res.ok) {
                throw new Error(res.text)
              }
              const resJson = await res.json();
              result = resJson.users.reduce((acc, cur) => {
                return [
                  ...acc,
                  {
                    url: `${exampleUrl}/${cur.id}/`,
                    refreshed_at: cur.refreshed_at
                  }
                ]
              }, result);
              maxPage = (resJson.total + perPage - 1) / perPage;
            }
            result.sort((a, b) => {
              return new Date(b.refreshed_at) - new Date(a.refreshed_at);
            })
            return result;
  extract_exists_urls:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - get_articles
      - get_users
    outputs:
      urls: ${{ steps.exists_urls.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: exists_urls
        with:
          result-encoding: json
          script: |
            const articles = ${{ needs.get_articles.outputs.articles }}.map((article) => article.url);
            const users = ${{ needs.get_users.outputs.users }}.map((user) => user.url);
            const defaults = [
              "https://example.com/news/",
              "https://example.com/",
              "https://example.com/news/about/"
            ];

            const targetUrls = [...articles, ...users, ...defaults];
            const result = [];

            for (const url of targetUrls) {
              result.push(url);
            }

            return result;
  generate_sitemap:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - extract_exists_urls
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            
            let str = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n"
            for (const url of ${{ needs.extract_exists_urls.outputs.urls }}) {
              str += `  <url>\n    <loc>${url}</loc>\n  </url>\n`;
            }
            str += "</urlset>\n";

            fs.writeFileSync("apps/web/public/sitemap.xml", str, "utf8");
      - name: Check Sitemap Output
        run: cat apps/web/public/sitemap.xml
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.REPO_AND_WORKFLOW_PAT }}
          commit-message: Upage Sitemap
          committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          branch: feat/siteamp
          delete-branch: true
          title: '[bot] Update sitemap'
          body: |
            if ok, please merge.
